name: CI-TEST
on:
  workflow_dispatch:
    inputs:
      repo_name:
        type: string
        description: "repo name"
        required: true
jobs:
  new:
    name: "Provision New"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v3.6.0
      - name: Create new team repo
        id: create_new_team_repo
        env:
          GH_TOKEN: ${{ secrets.MANAGE_REPOS_TOKEN }}
          GH_ORG: ${{ github.repository_owner }}
          GH_NEW_INFRA_LIVE_REPO_NAME: ${{ inputs.repo_name }}
        run: |
          # Check if the repo exists before trying to create it
          GH_REPO_STATUS_CODE="$(curl --silent --write-out '%{http_code}' --output /dev/null \
            -X GET \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/$GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME")"

          # If the repo does not exist (404 status code), then create it
          if [[ "$GH_REPO_STATUS_CODE" == 404 ]]; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /orgs/$GH_ORG/repos \
              -f name=$GH_NEW_INFRA_LIVE_REPO_NAME \
              -f visibility=public \
              -f auto_init=true

              echo "::notice title=New team repo created!::See created repository: https://github.com/$GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME."

          # If the repo exists (200 status code), print a message and continue
          elif [[ "$GH_REPO_STATUS_CODE" == 200 ]]; then
            echo "Repository https://github.com/$GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME already exists."

          # If GH returns a non 200 or non 404 status code, print and exit with an error
          else
            echo "Status code $GH_REPO_STATUS_CODE returned from GitHub API. Exiting with error."
            exit 1
          fi

      - name: Set new repo branch protection
        id: set_branch_protection
        env:
          GH_TOKEN: ${{ secrets.MANAGE_REPOS_TOKEN }}
          GH_ORG: ${{ github.repository_owner }}
          GH_NEW_INFRA_LIVE_REPO_NAME: ${{ inputs.repo_name }}
        run: |
          echo "Setting branch protection rules for $GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME. See https://docs.gruntwork.io/pipelines/security/branch-protection for more information on recommended rules."
          curl -L \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME/branches/main/protection \
            -d '{ "required_status_checks": { "strict": true, "checks": [ ] }, "required_pull_request_reviews": { "require_code_owner_reviews": true, "require_last_push_approval": true, "required_approving_review_count": 1 }, "enforce_admins": false, "restrictions": null }'
      
      - name: Add new repository to Gruntwork repo-allow-list
        id: update_repo_allow_list
        env:
          GH_TOKEN: ${{ secrets.MANAGE_REPOS_TOKEN }}
          GH_ORG: ${{ github.repository_owner }}
          GH_NEW_INFRA_LIVE_REPO_NAME: ${{ inputs.repo_name }}
        run: |
          # Check if repo is already in repo-allow-list
          REPO_IN_ALLOW_LIST="$(yq ".repo-allow-list | any_c(.  == \"$GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME\")" .gruntwork/config.yml)"
          if [[ "$REPO_IN_ALLOW_LIST" == "false" ]]; then
            echo "Adding $GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME to repo-allow-list."
            yq ".repo-allow-list += \"$GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME\"" -i .gruntwork/config.yml
            echo "create_pr=true" >> $GITHUB_OUTPUT
          elif [[ "$REPO_IN_ALLOW_LIST" == "true" ]]; then
            echo "Repo $GH_ORG/$GH_NEW_INFRA_LIVE_REPO_NAME already exists in repo-allow-list. Skipping PR creation."
            echo "create_pr=false" >> $GITHUB_OUTPUT
          else
            echo "Unspecified error. Exiting"
            echo "create_pr=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Create Pull Request to add the new repo to the allow list
        if: ${{ steps.update_repo_allow_list.outputs.create_pr == 'true' }}
        id: create_pr_allow_list
        uses: peter-evans/create-pull-request@v5.0.2
        with:
          base: main
          token: ${{ secrets.MANAGE_REPOS_TOKEN }}
          add-paths: .gruntwork/config.yml
          branch: "enhancement/sdlc-repo-${{ inputs.repo_name }}"
          commit-message: "Add SDLC repo-allow-list permissions for ${{ github.repository_owner }}"
          title: "Add SDLC repo-allow-list permissions for ${{ github.repository_owner }}"
          body: |
            This pull request updates the `config.yml` `repo-allow-list` permissions
      - name: Approve PR Add and Merge
        if: ${{ steps.update_repo_allow_list.outputs.create_pr == 'true' }}
        id: approve_and_merge_repo_allow_list
        env:
          GH_TOKEN: ${{ secrets.MANAGE_REPOS_TOKEN }}
          GH_ORG: ${{ github.repository_owner }}
          GH_NEW_INFRA_LIVE_REPO_NAME: ${{ inputs.repo_name }}
        run: |
          # Approve the PR from the previous step
          gh pr merge --admin ${{ steps.create_pr_allow_list.outputs.pull-request-number }}
